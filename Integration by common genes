# -*- coding: utf-8 -*-
"""Omics_data_integration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ejbodbRiZkpNAzMV9ro5QIY0S8bDCmE5

normalized count data
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
GSE118761_count_p1 = pd.read_csv("/content/drive/MyDrive/GSE Datasets/GSE118761_count_p1.csv")
GSE38003_count_p1 =  pd.read_csv("/content/drive/MyDrive/GSE Datasets/GSE38003_count_p1.csv")
GSE85567_count_norm_p1 =  pd.read_csv("/content/drive/MyDrive/GSE Datasets/GSE85567_count_norm_p1.csv")
GSE152004_count_data_p2 =  pd.read_csv("/content/drive/MyDrive/GSE Datasets/GSE152004_count_data_p2.csv")
GSE201955_norm_count_data_p2 =  pd.read_csv("/content/drive/MyDrive/GSE Datasets/GSE201955_norm_count_data_p2.csv")
GSE58434_norm_count_data_p2 =  pd.read_csv("/content/drive/MyDrive/GSE Datasets/GSE58434_norm_count_data_p2.csv")

GSE118761_genes_list = list(GSE118761_count_p1.iloc[:,0])
len(GSE118761_genes_list)

GSE38003_genes_list = list(GSE38003_count_p1.iloc[:,0])
len(GSE38003_genes_list)

GSE85567_genes_list = list(GSE85567_count_norm_p1.iloc[:,0])
len(GSE85567_genes_list)

GSE152004_genes_list = list(GSE152004_count_data_p2.iloc[:,0])
len(GSE152004_genes_list)

GSE201955_genes_list = list(GSE201955_norm_count_data_p2.iloc[:,0])
len(GSE201955_genes_list)

print(GSE58434_norm_count_data_p2.shape)
GSE58434_norm_count_data_p2.head()
GSE58434_genes_list = list(GSE58434_norm_count_data_p2.iloc[:,0])
len(GSE58434_genes_list)

common_genes_already_normalized_count = list(set(GSE85567_genes_list) & set(GSE201955_genes_list) & set(GSE58434_genes_list))
len(common_genes_already_normalized_count)



# Filter DataFrames to include only common genes
GSE85567_count_norm_p1_common = GSE85567_count_norm_p1[GSE85567_count_norm_p1.iloc[:, 0].isin(common_genes_already_normalized_count)]
print(GSE85567_count_norm_p1_common.shape)
GSE201955_norm_count_data_p2_common = GSE201955_norm_count_data_p2[GSE201955_norm_count_data_p2.iloc[:, 0].isin(common_genes_already_normalized_count)]
print(GSE201955_norm_count_data_p2_common.shape)
GSE58434_norm_count_data_p2_common = GSE58434_norm_count_data_p2[GSE58434_norm_count_data_p2.iloc[:, 0].isin(common_genes_already_normalized_count)]
print(GSE58434_norm_count_data_p2_common.shape)

combined_norm_data526 = pd.read_csv("/content/drive/MyDrive/GSE Datasets/norm_data_combine526 order.csv")
combined_norm_data526.shape
#this file contains gene list of 12177 as rows, and three datasets in order of 5,2,6 genes NORMALIZED Data

"""counts_data"""

GSE118761_count_p1_genes = GSE118761_count_p1.iloc[:, 0]#genes
GSE118761_count_p1_counts = GSE118761_count_p1.iloc[:, 1:]

total_counts_GSE118761 = GSE118761_count_p1_counts.sum()

GSE118761_cpm = GSE118761_count_p1_counts.divide(total_counts_GSE118761 , axis=1) * 1e6
GSE118761_count_p1_cpm = pd.concat([GSE118761_count_p1_genes, GSE118761_cpm], axis=1)
GSE118761_count_p1_cpm.head()

GSE38003_count_p1_genes = GSE38003_count_p1.iloc[:, 0]#genes
GSE38003_count_p1_counts = GSE38003_count_p1.iloc[:, 1:]

total_counts_GSE38003 = GSE38003_count_p1_counts.sum()

GSE38003_cpm = GSE38003_count_p1_counts.divide(total_counts_GSE38003 , axis=1) * 1e6
GSE38003_count_p1_cpm = pd.concat([GSE38003_count_p1_genes, GSE38003_cpm], axis=1)
GSE38003_count_p1_cpm.head()

GSE152004_count_data_p2_genes = GSE152004_count_data_p2.iloc[:, 0]#genes
GSE152004_count_data_p2_counts = GSE152004_count_data_p2.iloc[:, 1:]

total_counts_GSE152004= GSE152004_count_data_p2_counts.sum()

GSE152004_cpm = GSE152004_count_data_p2_counts.divide(total_counts_GSE152004 , axis=1) * 1e6
GSE152004_count_p1_cpm = pd.concat([GSE152004_count_data_p2_genes , GSE152004_cpm], axis=1)
GSE152004_count_p1_cpm.head()

common_genes_count = list(set(GSE118761_count_p1_genes ) & set(GSE38003_count_p1_genes ) & set(GSE152004_count_data_p2_genes))
len(common_genes_count)

# Filter DataFrames to include only common genes
GSE118761_count_p1_common = GSE118761_count_p1_cpm[GSE118761_count_p1_cpm.iloc[:, 0].isin(common_genes_count)]
print(GSE118761_count_p1_common.shape)
GSE38003_count_p1_common = GSE38003_count_p1_cpm[GSE38003_count_p1_cpm.iloc[:, 0].isin(common_genes_count)]
print(GSE38003_count_p1_common.shape)
GSE152004_count_data_p2_common = GSE152004_count_p1_cpm[GSE152004_count_p1_cpm.iloc[:, 0].isin(common_genes_count)]
print(GSE152004_count_data_p2_common .shape)

GSE118761_count_p1_common.to_csv("GSE118761_count_p1_common.csv", index = False)
GSE38003_count_p1_common.to_csv("GSE38003_count_p1_common.csv", index = False)
GSE152004_count_data_p2_common.to_csv("GSE152004_count_data_p2_common.csv", index = False)

common_genes_overall = list(set(common_genes_already_normalized_count ) & set(common_genes_count ))
len(common_genes_overall)

# Filter DataFrames to include only common genes    final showdown
combined_norm_data526_common = combined_norm_data526[combined_norm_data526.iloc[:, 0].isin(common_genes_overall)]
print(combined_norm_data526_common.shape)
combined_norm_data526_common.to_csv("combined_norm_data526_common.csv", index = False)

combined_count_data134 = pd.read_csv("/content/drive/MyDrive/GSE Datasets/count_common_134.csv")
combined_count_data134.shape

combined_count_data134_common = combined_count_data134[combined_count_data134.iloc[:, 0].isin(common_genes_overall)]
print(combined_count_data134_common.shape)

combined_count_data134_common.to_csv("combined_count_data134_common.csv", index = False)


"""Problem:
Demographic Data for Adults and Children have same meaningful insights related to asthmatic patients and healthy controls but for integrating these datasets with metadata of RNA Seq Datasets we eventually have common feature of SEX/GENDER, on the basis of this one common we can combine all files like
Sample type, Gender, â€¦ demographic columns
But this just adding noise to your omics dataset
Solution:
As your goal is to enhance your ML performance and these datasets (omics and demographics) have meaningful information as individual datasets, on combining them into one file just makes whole dataset senseless,
The solution for this problem is Transfer Learning in which ML model first trained on integrated omics dataset and this trained model is trained again on demographics data sets
We will provide you performance evaluation of individual datasets with fine tunned hyperparameters, and then after transfer leaning performance comparison  


"""

